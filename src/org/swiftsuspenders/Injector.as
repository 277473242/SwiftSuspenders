package org.swiftsuspenders{	import flash.utils.Dictionary;	import flash.utils.describeType;	import flash.utils.getQualifiedClassName;	/**	 * @author tschneidereit	 */	public class Injector	{		/*******************************************************************************************		*								public properties										   *		*******************************************************************************************/						/*******************************************************************************************		*								protected/ private properties							   *		*******************************************************************************************/		private var m_mappings : Dictionary;		private var m_singletons : Dictionary;		private var m_successfulInjections : Dictionary;						/*******************************************************************************************		*								public methods											   *		*******************************************************************************************/		public function Injector()		{			m_mappings = new Dictionary();			m_singletons = new Dictionary();			m_successfulInjections = new Dictionary(true);		}		public function bindValue(			whenAskedFor : Class, useValue : Object, named : String = null) : void		{			var config : InjectionConfig = new InjectionConfig(				whenAskedFor, useValue, InjectionConfig.INJECTION_TYPE_VALUE);			addMapping(config, named);		}		public function bindClass(			whenAskedFor : Class, instantiateClass : Class, named : String = null) : void		{			var config : InjectionConfig = new InjectionConfig(				whenAskedFor, instantiateClass, InjectionConfig.INJECTION_TYPE_CLASS);			addMapping(config, named);		}				public function bindSingleton(whenAskedFor : Class, named : String = null) : void		{			bindSingletonOf(whenAskedFor, whenAskedFor, named);		}		public function bindSingletonOf(			whenAskedFor : Class, useSingletonOf : Class, named : String = null) : void		{			var config : InjectionConfig = new InjectionConfig(				whenAskedFor, useSingletonOf, InjectionConfig.INJECTION_TYPE_SINGLETON);			addMapping(config, named);		}				public function injectInto(target : Object) : void		{			if (m_successfulInjections[target])			{				return;			}			var description : XML = describeType(target);			for each (var node : XML in description..metadata.(@name == 'Inject'))			{								var mappings : Dictionary;				if (node.hasOwnProperty('arg') && node.arg.(@key == 'name').length)				{					var name : String = node.arg.@value.toString();					mappings = m_mappings[name];					if (!mappings)					{						continue;					}				}				else				{					mappings = m_mappings;				}				var type : String = node.parent().@type.toString();				var config : InjectionConfig = mappings[type];				if (!config)				{					continue;				}								var fieldName : String = node.parent().@name.toString();				if (config.injectionType == InjectionConfig.INJECTION_TYPE_VALUE)				{					injectInto(config.response);					target[fieldName] = config.response;				}				else if (config.injectionType == InjectionConfig.INJECTION_TYPE_CLASS)				{					var response : Object = new (Class(config.response))();					injectInto(response);					target[fieldName] = response;				}				else if (config.injectionType == InjectionConfig.INJECTION_TYPE_SINGLETON)				{					var singleton : Object = m_singletons[config.response];					if (!singleton)					{						singleton = m_singletons[config.response] = new (Class(config.response))();						injectInto(singleton);						singleton;					}					target[fieldName] = singleton;				}			}			m_successfulInjections[target] = true;		}				public function unbind(clazz : Class, named : String = null) : void		{			var requestName : String = getQualifiedClassName(clazz);			if (named && m_mappings[named])			{				delete Dictionary(m_mappings[named])[requestName];			}			else			{				delete m_mappings[requestName];			}		}						/*******************************************************************************************		*								protected/ private methods								   *		*******************************************************************************************/		private function addMapping(config : InjectionConfig, named : String) : void		{			var requestName : String = getQualifiedClassName(config.request);			if (named)			{				var nameMappings : Dictionary = m_mappings[named];				if (!nameMappings)				{					nameMappings = m_mappings[named] = new Dictionary();				}				nameMappings[requestName] = config;			}			else			{				m_mappings[requestName] = config;			}		}	}}